require 'csv'

# Allows loading EQ settings from a file generated by RoomEQ Wizard (REW) and
# sending them to a PEQ.
#
# Configure REW to export data for a Generic Configurable PEQ, then export
# settings as a formatted text file.
class MB::EQLoader::EQFile
  TYPE_MAP = {
    'PK' => :peak,
  }.freeze

  attr_reader :info, :bands

  def initialize(filename)
    @info = []
    @bands = []

    File.open(filename, 'rt') do |f|
      l = nil

      # Look for header line
      loop do
        l = f.readline.strip
        break if l.start_with?('Number Enabled') || l.nil?
        @info << l.strip
      end

      raise "Did not find header row (read #{@info})" if l.nil?

      data = f.readlines.map(&:strip).join("\n")

      csv = CSV.new(data, col_sep: ' ', headers: l)
      csv.read.each do |row|
        @bands << {
          bypass: row['Enabled'] != 'True',
          type: TYPE_MAP[row['Type']],
          frequency: row['Frequency(Hz)'].to_f,
          gain: row['Gain(dB)'].to_f,
          width: row['BW_oct'].to_f,
          slope: 0, # TODO: support shelving filters if added to REW generic EQ
        }
      end
    end
  end

  # Sends the loaded EQ data to the given +peq+ object (an MB::EQLoader::PEQ).
  def apply(peq, first_band: 1)
    @bands.each_with_index do |b, idx|
      peq.set_band(band: idx + first_band, **b)
    end
  end
end
