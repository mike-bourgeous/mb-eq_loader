require 'csv'

# Allows loading EQ settings from a file generated by RoomEQ Wizard (REW) and
# sending them to a PEQ.
#
# Configure REW to export data for a Generic Configurable PEQ, then export
# settings as a formatted text file.
#
# See bin/send_eq for example usage.
class MB::EQLoader::EQFile
  TYPE_MAP = {
    'PK' => :peak,
  }.freeze

  attr_reader :info, :bands

  # Creates an EQ file reader and loads EQ data from the given filename.
  def initialize(filename)
    @info = []
    @bands = []

    File.open(filename, 'rt') do |f|
      l = nil

      # Look for header line in machine-formatted file and/or detect
      # human-formatted file
      loop do
        l = f.readline&.strip

        # TODO: support this file type
        # Filter  1: ON  PK       Fc   179.0 Hz  Gain   7.30 dB  BW oct   0.23
        # Filter  2: ON  PK       Fc   396.0 Hz  Gain  -5.00 dB  BW oct   0.83
        # Filter  3: ON  PK       Fc   676.0 Hz  Gain -10.60 dB  BW oct   0.29
        # Filter  4: ON  PK       Fc    1366 Hz  Gain  -8.50 dB  BW oct   1.08
        # Filter  5: ON  PK       Fc    2096 Hz  Gain  -9.70 dB  BW oct   0.53
        # Filter  6: ON  PK       Fc    3563 Hz  Gain -12.00 dB  BW oct   0.33
        # Filter  7: ON  PK       Fc   11908 Hz  Gain -11.30 dB  BW oct   1.39
        # Filter  8: ON  PK       Fc   17694 Hz  Gain  12.00 dB  BW oct   0.94
        break if l.nil? || l.start_with?('Number Enabled') || l.start_with?('Filter Settings file')

        @info << l.strip
      end

      raise "Did not find header row (read #{@info})" if l.nil?

      if l.start_with?('Number Enabled')
        # Machine-formatted file
        data = f.readlines.map(&:strip).join("\n")

        csv = CSV.new(data, col_sep: ' ', headers: l)
        csv.read.each do |row|
          @bands << {
            bypass: row['Enabled'] != 'True',
            type: TYPE_MAP[row['Type']],
            frequency: row['Frequency(Hz)'].to_f,
            gain: row['Gain(dB)'].to_f,
            width: row['BW_oct'].to_f,
            slope: 0, # TODO: support shelving filters if added to REW generic EQ
          }
        end

      elsif l.start_with?('Filter Settings')
        # Human-readable file

        # Read the rest of the header
        until f.eof? do
          l = f.readline&.strip

          data = l.scan(/Filter\s+(?<index>\d+):\s+(?<on>[OFN]+)\s+(?<type>[A-Za-z]+)\s+Fc\s+(?<frequency>\d+(\.\d+)?)\s+Hz\s+Gain\s+(?<gain>-?\d+(\.\d+)?)\s+dB\s+BW oct\s+(?<width>\d+(\.\d+)?)/)
          if data&.any?
            data.each do |row|
              @bands << {
                bypass: row[1] != 'ON',
                type: TYPE_MAP[row[2]],
                frequency: row[3].to_f,
                gain: row[4].to_f,
                width: row[5].to_f,
                slope: 0, # TODO: support shelf filter if REW writes it
              }
            end
          else
            @info << l.strip
          end
        end

      else
        raise "Unsupported file format in #{filename.inspect}"
      end
    end
  end

  # Sends the loaded EQ data to the given +peq+ object (an MB::EQLoader::PEQ).
  def apply(peq, first_band: 1)
    @bands.each_with_index do |b, idx|
      peq.set_band(band: idx + first_band, **b)
    end
  end
end
